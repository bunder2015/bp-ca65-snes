# SNES LoROM

MEMORY {
	# Console memory
	ZEROPAGE:	start = $000000, size = $0100, type = rw, file = ""; # 256b mirror of $7e0000-$7e00ff
	STACK:		start = $000100, size = $0100, type = rw, file = ""; # 256b mirror of $7e0100-$7e01ff
	WRAM00:		start = $000200, size = $1e00, type = rw, file = ""; # 8k mirror of $7e0000-$7e1fff (minus ZP/stack)
	WRAM7E:		start = $7e2000, size = $e000, type = rw, file = ""; # 64k $7e2000-$7effff (minus ZP/stack/WRAM00)
	WRAM7F:		start = $7f0000, size = $10000, type = rw, file = ""; # 64k $7f0000-$7fffff

	# Cartridge memory
	ROM80:		start = $808000, size = $8000, type = ro, file = %O, fill = yes, fillval = $00; # 32k $808000-$80ffff
	ROM81:		start = $818000, size = $8000, type = ro, file = %O, fill = yes, fillval = $00; # 32k $818000-$81ffff
	ROM82:		start = $820000, size = $8000, type = ro, file = %O, fill = yes, fillval = $00; # 32k $828000-$82ffff
	# TODO - banks 83 through ff as needed
	SRAMF0:		start = $f00000, size = $8000, type = rw, file = ""; # 32k $f00000-$f07fff
	# TODO - banks f1 through ff as needed
}

SEGMENTS {
	ZEROPAGE:	load = ZEROPAGE, type = zp;
	BSS00:		load = WRAM00, type = bss;
	BSS7E:		load = WRAM7E, type = bss;
	BSS7F:		load = WRAM7F, type = bss;

	# TODO - add code blocks to segments
	VECCODE:	load = ROM80, start = $80e000, type = ro;

	INTHDR:		load = ROM80, start = $80ffc0, type = ro;
	VECTORSN:	load = ROM80, start = $80ffe4, type = ro;
	VECTORSE:	load = ROM80, start = $80fff4, type = ro;
}

FILES {
	%O: format = bin;
}
